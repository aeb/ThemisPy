#!/usr/bin/env python3

"""
Reads in various Themis output files and generates a plot of various single-point
image statistics (e.g., the mean image, the standard deviation, the skewness, etc.),
and derivative images.  A set of sample parameters must be provided via a chain file.
This may be saved in ways, including standard image formats (PNG,JPG,PDF) and FITS.

Example:
$ themispy_polimage_stats -c Chain.dat --samples 10
"""

from matplotlib import use,rc
use('Agg')

import numpy as np
import argparse as ap
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.cbook import flatten
import os
import copy

import themispy as ty


def set_parser():

    # Create a parser object to manage command line options
    parser = ap.ArgumentParser(prog="themispy_polimage_stats",description=__doc__)

    parser.add_argument("-p","--plot-type",
                        type=str,
                        action='store',
                        default='lf',
                        help=("Sets type of polarized image plot to generate.  Options are:"
                              "  lf ... linear polarization ticks, color-coded by linear"
                              "         polarization fraction, on top of total flux."
                              "  ef ... elliptical polarization ticks, color-coded by total"
                              "         polarization fraction."
                              "  lL ... linear polarization ticks on top of linear polarized"
                              "         flux, with total flux contours superimposed."
                              "  I .... Stokes I with Stokes I contours. (Silly!)"
                              "  Q .... Stokes Q with Stokes I contours."
                              "  U .... Stokes U with Stokes I contours."
                              "  V .... Stokes V with Stokes I contours."
                              " Default: lf."))

    parser.add_argument("-c","--chain",
                        type=str,
                        action='store',
                        default=None,
                        required=True,
                        help=("<Required> Name of chain file to read. Default: Chain.dat"))

    parser.add_argument("-s","--samples",
                        type=int,
                        action='store',
                        default=32,
                        required=True,
                        help=("<Required> Number of samples to draw from the specified chain file. Default: 32."))

    parser.add_argument("--stats",
                        type=str,
                        nargs='+',
                        action='append',
                        default=None,
                        help=("Statistics to compute and plot.  Can be any statistic provided by :class:`model_image_single_point_statistics`"))
        
    parser.add_argument("-m","--model",
                        type=str,
                        action='store',
                        default="model_image.tag",
                        help=("Model specification glob. May be a model tag file name or an ccm_mexico+"
                              " model specification glob. See the vis.image.construct_model_image_from_glob"
                              " function documentation for format details. If contains a '.' will assume"
                              " that it is a tagvers-1.0 tag file."
                              " Default: model_image.tag"))

    parser.add_argument("-r","--reference",
                        type=int,
                        nargs="*",
                        action='store',
                        default=None,
                        help=("If the model type is a :class:`model_image_sum` or :class:`model_polarized_image_sum`, will fix the image origin of"
                              " the specified component. If no components are specified, will choose the first."
                              " Default: no component will be fixed to the origin."))

    parser.add_argument("-bf","--burn-fraction",
                        type=float,
                        action='store',
                        default=0.5,
                        help=("Fraction of chain to excise as burn in. Default: 0.5"))
    
    parser.add_argument("-N",
                        type=int,
                        nargs="*",
                        action='store',
                        default=None,
                        help=("Number of pixels in image. May be a single integer (square image) or two"
                              " integers (non-square image). If None uses the default in"
                              " vis.image.plot_model_image function."
                              " Default: None."))

    parser.add_argument("-tN",
                        type=int,
                        nargs="*",
                        action='store',
                        default=[32],
                        help=("Number of polarization ticks on image. May be a single integer (square image)"
                              " or two integers (non-square image). If None uses the default in the"
                              " vis.image.plot_polarized_image or vis.image.plot_linear_polarization_map functions."
                              " Default: None."))

    parser.add_argument("--limits",
                        type=float,
                        nargs="+",
                        action='store',
                        default=None,
                        help=("Limits (in microarcseconds) of the plot region.  May be a single float or"
                              " a set of four floats. If None uses the default in vis.image.plot_model_image"
                              " function. Default: None."))
                        
    # parser.add_argument("-n","--norm",
    #                     type=float,
    #                     action='store',
    #                     default=1.0,
    #                     help=("Logarithmic normalization relative to to the median and maximum brightness."
    #                           " A value of 0.0 sets Imax to the median, 1.0 sets Imax to the maximum."
    #                           " Default 1."))

    parser.add_argument("-t","--transfer",
                        type=str,
                        action='store',
                        default='linear',
                        help=("Set the transfer function ('linear','sqrt','log'). Default: 'linear'"))

    parser.add_argument("-tif","--tick-intensity-floor",
                        type=float,
                        action='store',
                        default=0.1,
                        help=("Fraction of the maximum intensity above which to plot polarization ticks."
                              "Default 0.1."))

    parser.add_argument("-o","--out",
                        type=str,
                        nargs="+",
                        action='append',
                        default=None,
                        help=("Set output files.  Multiple files and filetypes may be specified,"
                              " including fits.  However, if a filename ending in '.fits' is passed,"
                              " the path to a uvfits data file must be provided via --uvfits to set"
                              " the appropriate header information."
                              " Default: fit.png"))

    parser.add_argument("--uvfits",
                        type=str,
                        action='store',
                        default=None,
                        help=("Specifies a uvfits file from which fits header information for the relevant"
                              " sources may be extracted."))

    parser.add_argument("--smooth",
                        type=float,
                        action='store',
                        default=None,
                        help=("If passed, will smooth the image with a symmetric Gaussian filter with FWHM given in microarcseconds."))

    parser.add_argument("-ms","--mscale",
                        type=float,
                        action='store',
                        default=0.5,
                        help=("Sets the polarization fraction normalization. Default: 0.5."))    

    parser.add_argument("-RM",
                        type=float,
                        action='store',
                        default=None,
                        help=("Sets the Faraday rotation measure in rad/m^2. Default: None"))    

    parser.add_argument("-w","--wavelength",
                        type=float,
                        action='store',
                        default=1.3e-3,
                        help=("Sets the observation wavelength in m. Default: 1.3e-3."))
    
    parser.add_argument("--usetex",
                        action='store_true',
                        default=False,
                        help=("Turns on using LaTex in the rendering.  Note that this takes longer,"
                              " but the result is MUCH better looking."))
                        
    parser.add_argument("-v","--verbose",
                        action='store_true',
                        default=False,
                        help=("Provides verbose output about model and plot construction."))
    
    return parser



if __name__ == "__main__" :


    # Get command line options
    args = set_parser().parse_args()    
    if (args.verbose) :
        print("  ",args)

    # Use LaTex or not
    if (args.usetex) :
        rc('font',**{'family':'serif','serif':['Times','Palatino','Computer Modern Roman']})
        rc('text', usetex=True)
    

    # Construct a model_image from glob
    if ('.' in args.model) :
        if (args.verbose):
            print("Reading tag file %s"%(args.model))
        model_image = ty.vis.construct_model_image_from_glob(args.model,'tagvers-1.0')
    else :
        if (args.verbose):
            print("Using ccm_mexico glob %s"%(args.model))
        model_image = ty.vis.construct_model_image_from_glob(args.model,'ccm_mexico+')

    # Set the reference component if desired
    if (not (args.reference is None)) :
        if (isinstance(model_image,ty.vis.model_image_sum) or isinstance(model_image,ty.vis.model_polarized_image_sum)) :
            if (args.reference==[]) :
                args.reference=0
            else :
                args.reference=args.reference[0]
            model_image.set_reference_component(args.reference)
        else :
            print("WARNING: -r,--reference only have an effect when the model is a model_image_sum or model_polarized_image_sum.")
        
    if (args.verbose):
        print("Model type and size:",type(model_image),model_image.size)

    #### ADDITION
    # Add rotation measure if desired
    if (not (args.RM is None)) :
        model_image_underotated = copy.deepcopy(model_image)
        model_image = ty.vis.model_polarized_image_Faraday_derotated(model_image_underotated,args.RM,args.wavelength)
        
        if (args.verbose):
            print("Faraday derotating:",args.RM,args.wavelength)
    #############
            
    # Check limits
    if (not (args.N is None) ):
        if (len(args.N)==1) :
            args.N = args.N[0]
        elif (len(args.N)==2) :
            pass
        else :
            print("ERROR: Either 1 or 2 arguments are expected after -N.")
            quit()

    # Check tick resolution
    if (not (args.tN is None) ):
        if (len(args.tN)==1) :
            args.tN = args.tN[0]
        elif (len(args.tN)==2) :
            pass
        else :
            print("ERROR: Either 1 or 2 arguments are expected after -tN.")
            quit()
            
    # Check limits
    if (not (args.limits is None) ):
        if (len(args.limits)==1) :
            args.limits = args.limits[0]
        elif (len(args.limits)==4) :
            pass
        else :
            print("ERROR: Either 1 or 4 arguments are expected after --limits.")
            quit()

    # Generate single point statistics image object
    # Always make mean and always make mean first
    if (args.stats is None) :
        stats_list = ['mean', 'stddev']
    else :
        stats_list = list(flatten(args.stats))
        stats_list = np.array(stats_list)
        stats_list = ['mean'] + stats_list[stats_list!='mean'].tolist()

            
    if (args.verbose) :
        print("Generating the following statistics:",stats_list)
        
    # Run through checkdown for different ways of specifying parameters
    chain = ty.chain.sample_chain(args.chain,args.samples,burn_fraction=args.burn_fraction,parameter_list=range(model_image.size))
    
    # # Make safe for noise modeling
    # chain = chain[:,:model_image.size]
        
    # Add smoothing if desired
    if (not (args.smooth is None)) :
        model_image_unsmoothed = copy.deepcopy(model_image)
        model_image = ty.vis.model_image_smooth(model_image_unsmoothed)
        uas2rad = np.pi/(180.0*3600e6)
        smooth_chain = np.zeros((chain.shape[0],3))
        smooth_chain[:,0] = args.smooth*uas2rad/np.sqrt(8.0*np.log(2.0))
        chain = np.hstack([chain,smooth_chain])

    #stats_image = ty.vis.model_polarized_image_single_point_statistics(model_image,stats_list,32)
    stats_image = ty.vis.model_polarized_image_single_point_statistics(model_image,stats_list,32)
    
    # Save image as desired
    if (args.out is None) :
        args.out = ['fit.png']

    for stat in stats_list :
        
        stats_image.set_default_stat(stat)
        
        # Start figure particulars
        plt.figure(figsize=(6,6))
        plt.axes([0.15,0.15,0.8,0.8])

        # Set transfer for skewness and kurtosis to linear always
        if (stat=='skewness' or stat=='kurtosis') :
            transfer = 'linear'
        else :
            transfer = args.transfer



            
        # Generate plot
        #h,fig,axs,x,y,I = ty.vis.plot_intensity_map(stats_image, chain, limits=args.limits, shape=args.N, return_intensity_map=True, transfer_function=transfer, verbosity=int(args.verbose),Imax=1)
        #### ADDITION
        # Generate plot
        if (args.plot_type=='lf') :
            h,axs,fig,x,y,S = ty.vis.plot_polarized_image(stats_image, chain, limits=args.limits, shape=args.N, tick_shape=args.tN, mscale=args.mscale, transfer_function=args.transfer, tick_fractional_intensity_floor=args.tick_intensity_floor, colorbar=True, elliptical=False, verbosity=int(args.verbose), return_stokes_map=True)
        elif (args.plot_type=='ef') :
            h,axs,fig,x,y,S = ty.vis.plot_polarized_image(stats_image, chain, limits=args.limits, shape=args.N, tick_shape=args.tN, mscale=args.mscale, transfer_function=args.transfer, tick_fractional_intensity_floor=args.tick_intensity_floor, colorbar=True, elliptical=True, verbosity=int(args.verbose), return_stokes_map=True)
        elif (args.plot_type=='lL') :
            h,axs,fig,x,y,S = ty.vis.plot_linear_polarization_map(stats_image, chain, limits=args.limits, shape=args.N, tick_shape=args.tN, colormap='plasma', intensity_contours=True, intensity_colors=[[0.75,0.75,0.75]], mscale=0.5, colorbar='frac', transfer_function=args.transfer, tick_fractional_intensity_floor=args.tick_intensity_floor, verbosity=int(args.verbose), return_stokes_map=True)
        elif (args.plot_type in ['I','Q','U','V'] ) :
            h,axs,fig,x,y,S = ty.vis.plot_stokes_map(stats_image, chain, stokes=args.plot_type, limits=args.limits, shape=args.N, colormap='bwr', intensity_contours=True, intensity_colors=['k'], colorbar='flux', stokes_fractional_intensity_floor=args.tick_intensity_floor, return_stokes_map=True, verbosity=int(args.verbose))
        else :
            raise RuntimeError("Plot type %s is not recognized.  See help for options."%(args.plot_type))
        ############

        
        # Set the proper normalization
        # if (stat=='mean') :
        #     # Imed = np.median(I)
        #     Imed = np.abs(np.median(I)) + 1e-20
        #     Imax = np.max(I)
        #     if (args.transfer=='linear') :
        #         vmax = (Imed) * 10**( args.norm*np.log10(Imax/Imed) )
        #         vmin = 0
        #     elif (args.transfer=='sqrt') :
        #         vmax = np.sqrt( (Imed) * 10**( args.norm*np.log10(Imax/Imed) ) )
        #         vmin = 0
        #     elif (args.transfer=='log') :
        #         vmax = args.norm*np.log10(Imax/Imed) + np.log10(Imed)
        #         vmin = vmax-2

        if (stat=='mean') :
            #plt.clim(vmin=vmin,vmax=vmax)
            #plt.set_cmap('afmhot')
            plt.text(0.025,0.975,'Mean',color='w',transform=plt.gca().transAxes,ha='left',va='top')

        if (stat=='median') :
            #plt.clim(vmin=vmin,vmax=vmax)
            #plt.set_cmap('afmhot')
            plt.text(0.025,0.975,'Median',color='w',transform=plt.gca().transAxes,ha='left',va='top')
            
        if (stat=='stddev') :
            # SDmax = np.max(I)/vmax
            # if ( np.log10(SDmax) < -1 ) :
            #     if ( np.ceil(np.log10(SDmax))>-2 ) :
            #         lbl = r'$\times10$'
            #         SDmax = 1.0/10.0
            #     else :
            #         lbl = r'$\times10^{%i}$'%(-int(np.ceil(np.log10(SDmax))))
            #         SDmax = 10**(int(np.ceil(np.log10(SDmax))))
            #     plt.text(0.975,0.975,lbl,color='w',transform=plt.gca().transAxes,ha='right',va='top')
            # else :
            #     SDmax = 1
            # print("SDmax:",SDmax)
            # plt.clim(vmin=vmin*SDmax,vmax=vmax*SDmax)
            plt.text(0.025,0.975,'Std Dev',color='w',transform=plt.gca().transAxes,ha='left',va='top')
            
        if (stat=='skewness') :
            # Sminmax = max(abs(np.min(I)),abs(np.max(I)))
            # plt.clim(vmin=-Sminmax,vmax=Sminmax)
            # plt.set_cmap('seismic')
            plt.text(0.025,0.975,'Skewness',color='k',transform=plt.gca().transAxes,ha='left',va='top')
            plt.colorbar()
            
        if (stat=='kurtosis') :
            # Kminmax = max(abs(np.min(I)),abs(np.max(I)))
            # plt.clim(vmin=0,vmax=Kminmax)
            # plt.set_cmap('seismic')
            plt.text(0.025,0.975,'Kurtosis',color='k',transform=plt.gca().transAxes,ha='left',va='top')
            plt.colorbar()
                
        for outfile in flatten(args.out) :
            if (args.verbose):
                print("Saving file %s"%(outfile))
            name,ext = os.path.splitext(outfile)

            outfile_name = name + '_' + stat + ext
            
            if (ext=='.fits' or ext=='.FITS') :
                if (args.verbose):
                    print("  Saving FITS file.")
                ty.vis.write_fits(x,y,I,outfile_name,args.uvfits)
            else :
                if (args.verbose):
                    print("  Saving non-FITS file.")
                plt.savefig(outfile_name,dpi=300)

        plt.close()
