#!/usr/bin/env python3

"""
Reads in a Themis gain file of any type and the matching uvfits data file and
writes the self-calibrated data file.

Example:
$ themispy_selfcal_uvfits -g gain_corrections.d -d data.uvfits
"""


import numpy as np
import argparse as ap
import warnings
from matplotlib.cbook import flatten

# We don't need ehtim, so don't import it
import sys
import themispy as ty

# Read in ehtim, if possible
try:
    import ehtim as eh
    ehtim_found = True
except:
    warnings.warn("Package ehtim not found.  Some functionality will not be available.  If this is necessary, please ensure ehtim is installed.", Warning)
    ehtim_found = False

    
def set_parser() :
    # Create a parser object to manage command line options
    parser = ap.ArgumentParser(prog='themispy_gain_plots',description=__doc__)

    parser.add_argument('-g',	
                        type=str,
                        action='store',	
			required=True,
                        help=("<Required> Name of gain file to read."))
    
    parser.add_argument('-d','--uvfits',	
                        type=str,
                        action='store',	
			required=True,
                        help=("<Required> Name of uvfits data file."))

    parser.add_argument("-s","--scan-avg",
                        action='store_true',
                        default=False,
                        help=("Produce scan averaged data."))

    parser.add_argument("--avg-time",
                        type=float,
                        action='store',
                        help=("Timescale over which to average the data in seconds. Superseded"
                              " by -s,--scan-avg. Default: None."))

    parser.add_argument("-r","--relative-timestamps",
                        action="store_true",
                        default=False,
                        help=("Will ignore the absolute time offset in the gain file.  Requires"
                              " that the number of data points in the uvfits file match the number"
                              " of gain reconstruction epochs."))
    
    parser.add_argument("-o","--out",
                        type=str,
                        action="store",
                        help="Output file name. Default: gain_plot.png")

    parser.add_argument("-v","--verbose",
                        type=int,
                        default=0,
                        action="store",
                        help="Sets verbosity level in :fun:`write_uvfits`. Level 1 outputs values, level 4 generates multiple plots.")

    return parser


if __name__ == "__main__" :


    # Get command line options
    args = set_parser().parse_args()

    # load in the data
    obs = eh.obsdata.load_uvfits(args.uvfits)

    # (scan) average the data
    if (args.scan_avg) :
        obs.add_scans()
        obs = obs.avg_coherent(0.0, scan_avg=True)
    elif (not args.avg_time is None) :
        obs = obs.avg_coherent(args.avg_time)
    
    # Read in the gain file
    gain_data = ty.vis.read_gain_file(args.g)

    # Determine the output file name
    if (args.out is None) :
        args.out = 'selfcal_'+args.uvfits.split('/')[-1]
    
    # Apply the gains and write the calibrated uvfits file
    ty.data.write_uvfits(obs,args.out,gain_data,relative_timestamps=args.relative_timestamps,verbosity=args.verbose)
