#!/usr/bin/env python3

"""
Reads in various Themis output files and generates a plot of the resulting polarized image.
A sample parameter value must be provided in one of three ways: (1) by specifying a
fit_summaries.txt file, (2) by specifying an MCMC chain file with an index (optional),
or (3) by specifying an MCMC chain file and corresponding likelihood file.
This may be saved in ways, including standard image formats (PNG,JPG,PDF) and FITS.

Example:
$ themispy_polimage_fit -c Chain.dat -l Lklhd.dat
"""

from matplotlib import use,rc
use('Agg')

import numpy as np
import argparse as ap
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.cbook import flatten
import os
import copy

import themispy as ty

def set_parser():

    # Create a parser object to manage command line options
    parser = ap.ArgumentParser(prog="themispy_polimage_fit",description=__doc__)

    parser.add_argument("-p","--plot-type",
                        type=str,
                        action='store',
                        default='lf',
                        help=("Sets type of polarized image plot to generate.  Options are 'lf', 'ef', 'lL'."
                              "In detail: 'lf' produces linear polarization ticks, color-coded by linear"
                              "polarization fraction, on top of total flux; 'ef' produces elliptical polarization"
                              "ticks, color-coded by total polarization fraction, on top of total flux; 'lL'"
                              "produces linear polarization ticks on top of linear polarized flux, with total"
                              "flux contours superimposed.  Default: 'lf'."))

    parser.add_argument("-c","--chain",
                        type=str,
                        action='store',
                        default=None,
                        help=("Name of chain file to read.  If given, either an index must be specified with"
                              " -i,--index or likelihood file must be specified with -l,-lklhd."))

    parser.add_argument("-l","--lklhd",
                        type=str,
                        action='store',
                        default=None,
                        help=("Name of likelihood file to read.  If given, will plot the highest likelihood"
                              " sample. Requires chain file to be provided with -c,--chain."))

    parser.add_argument("-f","--fsfile",
                        type=str,
                        action='store',
                        default=None,
                        help=("Name of fit summaries file to read.  If given, will plot records listed"
                              " within.  If an index is given with -i,--index will plot the corresponding"
                              " line; otherwise plots the first line."
                              " Default: fit_summaries.txt"))

    parser.add_argument("-i","--index",
                        type=int,
                        action='store',
                        default=0,
                        help=("Name of fit summaries file to read.  If given, will plot records listed"
                              " within.  If an index is given with -i,--index will plot the corresponding"
                              " line; otherwise plots the first line."))

    parser.add_argument("-m","--model",
                        type=str,
                        action='store',
                        default="model_image.tag",
                        help=("Model specification glob. May be a model tag file name or an ccm_mexico+"
                              " model specification glob. See the vis.image.construct_model_image_from_glob"
                              " function documentation for format details. If contains a '.' will assume"
                              " that it is a tagvers-1.0 tag file."
                              " Default: model_image.tag"))

    parser.add_argument("-r","--reference",
                        type=int,
                        nargs="*",
                        action='store',
                        default=None,
                        help=("If the model type is a :class:`model_image_sum` or :class:`model_polarized_image_sum`, will fix the image origin of"
                              " the specified component. If no components are specified, will choose the first."
                              " Default: no component will be fixed to the origin."))
    
    parser.add_argument("-N",
                        type=int,
                        nargs="*",
                        action='store',
                        default=None,
                        help=("Number of pixels in image. May be a single integer (square image) or two"
                              " integers (non-square image). If None uses the default in"
                              " vis.image.plot_model_image function."
                              " Default: None."))

    parser.add_argument("-tN",
                        type=int,
                        nargs="*",
                        action='store',
                        default=None,
                        help=("Number of polarization ticks on image. May be a single integer (square image)"
                              " or two integers (non-square image). If None uses the default in the"
                              " vis.image.plot_polarized_image or vis.image.plot_linear_polarization_map functions."
                              " Default: None."))

    parser.add_argument("--limits",
                        type=float,
                        nargs="+",
                        action='store',
                        default=None,
                        help=("Limits (in microarcseconds) of the plot region.  May be a single float or"
                              " a set of four floats. If None uses the default in vis.image.plot_model_image"
                              " function. Default: None."))
                        
    parser.add_argument("-n","--norm",
                        type=float,
                        action='store',
                        default=1.0,
                        help=("Logarithmic normalization relative to to the median and maximum brightness."
                              " A value of 0.0 sets Imax to the median, 1.0 sets Imax to the maximum. Default: 1.0."))

    parser.add_argument("-t","--transfer",
                        type=str,
                        action='store',
                        default='linear',
                        help=("Set the transfer function ('linear','sqrt','log'). Default: 'linear'"))

    parser.add_argument("-tif","--tick-intensity-floor",
                        type=float,
                        action='store',
                        default=0.1,
                        help=("Fraction of the maximum intensity above which to plot polarization ticks."
                              "Default 0.1."))

    parser.add_argument("--movie",
                        type=str,
                        nargs='*',
                        action='store',
                        help=("Will treat the model as time variable. Arguments are optional, and may be"
                              " contain a [start]:[step]:[stop] sequence, containing any combination of start,"
                              " step, stop times in hours (colons required). Missing values will be set"
                              " to defaults: if --uvfits is set, the start/stop times will be set to the"
                              " first and last timesteps therein, otherwise the default start/stop times"
                              " are 0h and 24h. In both cases, the default time step is 1h."))

    parser.add_argument("--timestamp-file",
                        action='store_true',
                        default=False,
                        help=("If saving multiple frames, will append filename with timestamp instead of index.  Default: frames will be indexed."))
    
    parser.add_argument("-o","--out",
                        type=str,
                        nargs="+",
                        action='append',
                        default=None,
                        help=("Set output files.  Multiple files and filetypes may be specified,"
                              " including fits.  However, if a filename ending in '.fits' is passed,"
                              " the path to a uvfits data file must be provided via --uvfits to set"
                              " the appropriate header information."
                              " Default: fit.png"))

    parser.add_argument("--uvfits",
                        type=str,
                        action='store',
                        default=None,
                        help=("Specifies a uvfits file from which fits header information for the relevant"
                              " sources may be extracted."))

    parser.add_argument("-s","--smooth",
                        type=float,
                        action='store',
                        default=None,
                        help=("If passed, will smooth the image with a symmetric Gaussian filter with"
                              " FWHM given in microarcseconds."))
    
    parser.add_argument("--usetex",
                        action='store_true',
                        default=False,
                        help=("Turns on using LaTex in the rendering.  Note that this takes longer,"
                              " but the result is MUCH better looking."))
                        
    parser.add_argument("-v","--verbose",
                        action='store_true',
                        default=False,
                        help=("Provides verbose output about model and plot construction."))
    
    return parser



if __name__ == "__main__" :


    # Get command line options
    args = set_parser().parse_args()    
    if (args.verbose) :
        print("  ",args)

    # Use LaTex or not
    if (args.usetex) :
        rc('font',**{'family':'serif','serif':['Times','Palatino','Computer Modern Roman']})
        rc('text', usetex=True)
    

    # Construct a model_image from glob
    if ('.' in args.model) :
        if (args.verbose):
            print("Reading tag file %s"%(args.model))
        model_image = ty.vis.construct_model_image_from_glob(args.model,'tagvers-1.0')
    else :
        if (args.verbose):
            print("Using ccm_mexico glob %s"%(args.model))
        model_image = ty.vis.construct_model_image_from_glob(args.model,'ccm_mexico+')

    # Set the reference component if desired
    if (not (args.reference is None)) :
        if (isinstance(model_image,ty.vis.model_image_sum) or isinstance(model_image,ty.vis.model_polarized_image_sum)) :
            if (args.reference==[]) :
                args.reference=0
            else :
                args.reference=args.reference[0]
            model_image.set_reference_component(args.reference)
        else :
            print("WARNING: -r,--reference only have an effect when the model is a model_image_sum or model_polarized_image_sum.")
            
        
    if (args.verbose):
        print("Model type and size:",type(model_image),model_image.size)
    
    # Run through checkdown for different ways of specifying parameters
    if (not (args.fsfile is None) ) :
        # An fit_summaries file has been passed:
        if (args.verbose):
            print("Reading fit_summaries file %s"%(args.fsfile))
        parameters = np.loadtxt(args.fsfile,skiprows=(1+args.index),max_rows=1,usecols=np.arange(1,model_image.size+1))
    elif (not (args.chain is None) ) :
        if (args.lklhd is None) :
            # Picking a single index
            if (args.verbose):
                print("Reading sample %i from chain file %s"%(args.index,args.chain))
            parameters = np.loadtxt(args.chain,skiprows=(1+args.index),max_rows=1,usecols=np.arange(0,model_image.size))
        else :
            # Picking the maximum likelihood
            if (args.verbose):
                print("Reading highest likelihood sample from lklhd file %s and chain file %s"%(args.lklhd,args.chain))
            parameters,_ = ty.chain.most_likely_erun(args.chain,args.lklhd)
            parameters = parameters[0][:model_image.size]
    else :
        # No acceptable method has been indicated
        print("ERROR: Some method of specifying parameters must be set.")
        quit()

    if (args.verbose):
        print("Parameters:",parameters)

    # Add smoothing if desired
    if (not (args.smooth is None)) :
        uas2rad = np.pi/(180.0*3600e6)
        model_image_unsmoothed = copy.deepcopy(model_image)
        model_image = ty.vis.model_polarized_image_smooth(model_image_unsmoothed)
        parameters = np.append(parameters,[args.smooth*uas2rad/np.sqrt(8.0*np.log(2.0)), 0, 0])

        if (args.verbose):
            print("Smoothed parameters:",parameters)    
            
        
    # Check resolution
    if (not (args.N is None) ):
        if (len(args.N)==1) :
            args.N = args.N[0]
        elif (len(args.N)==2) :
            pass
        else :
            print("ERROR: Either 1 or 2 arguments are expected after -N.")
            quit()

    # Check tick resolution
    if (not (args.tN is None) ):
        if (len(args.tN)==1) :
            args.tN = args.tN[0]
        elif (len(args.tN)==2) :
            pass
        else :
            print("ERROR: Either 1 or 2 arguments are expected after -tN.")
            quit()

    # Check limits
    if (not (args.limits is None) ):
        if (len(args.limits)==1) :
            args.limits = args.limits[0]
        elif (len(args.limits)==4) :
            pass
        else :
            print("ERROR: Either 1 or 4 arguments are expected after --limits.")
            quit()

    # Check time steps
    if (args.movie is None) :
        time_list = [0.0]
    else :
        time_start = 0.0
        time_end = 24.0
        time_step = 1.0

        if (not (args.uvfits is None)) :
            obs = ty.vis.image.eh.obsdata.load_uvfits(args.uvfits)
            time_start = obs.tstart + 24.0*(obs.mjd-51544.5)
            time_end = obs.tstop + 24.0*(obs.mjd-51544.5)
            
        if (len(args.movie)>0) :
            tmp = args.movie[0].split(':')
            if (len(tmp)<3) :
                print("ERROR: If time steps are specified, they must be specified in [start]:[step]:[stop].")
                quit()
            if (tmp[0]!='') :
                time_start = float(tmp[0])
            if (tmp[1]!='') :
                time_step = float(tmp[1])
            if (tmp[2]!='') :
                time_end = float(tmp[2])

        time_list = np.arange(time_start,time_end,time_step,dtype=float)

    # Save image as desired
    if (args.out is None) :
        args.out = ['fit.png']

    # Check if we are writing an hdf5 file
    writing_hdf5=False
    writing_other=False
    for outfile in flatten(args.out) :
        _,ext = os.path.splitext(outfile)
        writing_hdf5 = writing_hdf5 or (ext=='.hdf5')
        writing_other = writing_other or (ext!='.hdf5')
    # If only writing hdf5, only run through first time stamp since the rest will be constructed in the write_hdf5 function.
    if (writing_other==False) :
        time_list_hdf5 = copy.copy(time_list)
        time_list = [time_list[0]]
        
    # Loop over time
    for ti,time in enumerate(time_list) :
                
        # Start figure particulars
        #plt.figure(figsize=(6,6))
        #plt.axes([0.15,0.15,0.8,0.8])

        # Set model time
        model_image.set_time(time)
        
        # Generate plot
        if (args.plot_type=='lf') :
            ty.vis.plot_polarized_image(model_image, parameters, limits=args.limits, shape=args.N, tick_shape=args.tN, mscale=0.5, transfer_function=args.transfer, tick_fractional_intensity_floor=args.tick_intensity_floor, colorbar=True, elliptical=False, verbosity=int(args.verbose))
        elif (args.plot_type=='ef') :
            ty.vis.plot_polarized_image(model_image, parameters, limits=args.limits, shape=args.N, tick_shape=args.tN, mscale=0.5, transfer_function=args.transfer, tick_fractional_intensity_floor=args.tick_intensity_floor, colorbar=True, elliptical=True, verbosity=int(args.verbose))
        elif (args.plot_type=='lL') :
            ty.vis.plot_linear_polarization_map(model_image, parameters, limits=args.limits, shape=args.N, tick_shape=args.tN, colormap='plasma', intensity_contours=True, intensity_colors=[[0.75,0.75,0.75]], mscale=0.5, colorbar='frac', transfer_function=args.transfer, tick_fractional_intensity_floor=args.tick_intensity_floor, verbosity=int(args.verbose))
        else :
            raise RuntimeError("Plot type %s is not recognized.  See help for options."%(args.plot_type))

        # Save non-hdf5 files
        for outfile in flatten(args.out) :
            if (args.verbose):
                print("Saving file %s"%(outfile))
            name,ext = os.path.splitext(outfile)

            if (len(time_list)>1) :
                if (args.timestamp_file) :
                    name = name + '_%05g'%(time)
                else :
                    name = name + '_%05i'%(ti)
            outname = name + ext
            
            if (ext=='.fits' or ext=='.FITS') :
                if (args.verbose):
                    print("  Saving FITS file.")
                model_image.generate(parameters)
                ty.vis.write_fits(x,y,model_image,outname,args.uvfits,verbosity=args.verbose)
            elif (ext=='.hdf5') :
                pass
            else :
                if (args.verbose):
                    print("  Saving non-FITS file.")
                plt.savefig(outname,dpi=300)

        # Close the current figure
        plt.close()


    # Write hdf5 if requested
    if (writing_hdf5) :
        for outfile in flatten(args.out) :
            _,ext = os.path.splitext(outfile)
            if (ext=='.hdf5') :
                if (args.verbose):
                    print("  Saving FITS file.")
                    
                ty.vis.write_hdf5(x,y,time_list_hdf5,model_image,outfile,args.uvfits,verbosity=args.verbose)
